pipeline {
     agent {
        kubernetes {
            inheritFrom  "${JOB_NAME}"
        }
    }
    environment {
        KUBE_CONTEXT = 'kubernetes'
        DOCKER_REGISTRY = 'harbor.k8s.com/base'
        APP_IMAGE_NAME = 'op-demo-app'
    }

    stages {
        stage('Generate Timestamp') {
            steps {
                script {
                    def timestamp = new java.text.SimpleDateFormat("yyyyMMddHHmm").format(new Date())
                    env.TIMESTAMP = timestamp
                    echo "生成的时间镜像tag戳字符串: ${timestamp}"
                }
            }
        }

        stage('Checkout') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/li-zengping/op-demo-api'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // 使用withDockerRegistry步骤包装docker构建和推送
                    sh 'echo "admin" | docker login -u "admin" --password-stdin harbor.k8s.com'
                   sh "docker build -t ${DOCKER_REGISTRY}/${APP_IMAGE_NAME}:${env.TIMESTAMP}_${BUILD_NUMBER} ."
                   sh "docker push ${DOCKER_REGISTRY}/${APP_IMAGE_NAME}:${env.TIMESTAMP}_${BUILD_NUMBER}"
                }
            }
        }
        

        stage('Deploy to Kubernetes') {
            steps {
                dir('yaml/dev') {
                    script {
                        sh """
                           sed -i 's|image: #appImage#|image: ${DOCKER_REGISTRY}/${APP_IMAGE_NAME}:${env.TIMESTAMP}_${BUILD_NUMBER}|' ${JOB_NAME}.yaml
                        """
                        sh "kubectl apply -f ${JOB_NAME}.yaml -n dev"
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build and deployment successful!'
        }
        failure {
            echo 'Build or deployment failed!'
        }
    }
}
